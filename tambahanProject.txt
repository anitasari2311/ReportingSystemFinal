---------------------------------------------------ms1.py-----------------------------------------------------------

    @app.route('/updateDataPassword/<data>', methods = ['POST', 'GET'])
    def updateDataPassword(data):
        if request.method == 'POST':
            requestData = json.loads(data)

            for x in requestData:
                uId         = requestData['uId']
                old_pass    = requestData['passLama']
                new_pass    = requestData['passBaru']
                conf_pass   = requestData['konfPass']

            try: 
                db = databaseCMS.db_request()

                cursor = db.cursor()
                if (new_pass == conf_pass) :
            
                    cursor.execute(' UPDATE m_user SET user_password = "'+conf_pass+'" WHERE user_id = "'+uId+'" AND user_password = "'+old_pass+'" ')
                    db.commit()

                else:    
                    return "Password gagal diubah"

            except Error as e:
                print("Error while connecting file MySQL", e)
                flash('Error,', e)

            finally:
                    #Closing DB Connection.
                        if(db.is_connected()):
                            cursor.close()
                            db.close()
                        print("MySQL connection is closed")

----------------------------------------------ms3.py------------------------------------------------------------------

@app.route('/runSchedule/<kode_laporan>', methods=['POST','GET'])
def runSchedule(kode_laporan):
    tglRun          = datetime.datetime.now().strftime('%x')
    waktuRun        = datetime.datetime.now().strftime('%X')
    selesaiRun      = ''
    runStatus       = 'R'
    error_deskripsi = ''
    run_hostname    = socket.gethostname()

    # MENDAPATKAN DETAIL REPORT
    detReport           = requests.get('http://127.0.0.1:5002/getDetailReport/'+kode_laporan)
    detRResp            = json.dumps(detReport.json())
    loadDetailReport    = json.loads(detRResp)
    

    # MENDAPATKAN JUMLAH HEADER (1 / 2)
    jmlHead     = loadDetailReport[6]
    servId      = loadDetailReport[9]
    print('Jumlah Header: ',jmlHead)
    #=========================================================

    

    if jmlHead == '1':

        try:
            count_header = 0
            
            PIC = []
            Penerima = []
            # MENDAPATKAN LIST PIC / PENERIMA SESUAI DENGAN LAPORAN
            getNama = requests.get('http://127.0.0.1:5001/getNamaUser/'+kode_laporan)
            namaResp = json.dumps(getNama.json())
            loadNama = json.loads(namaResp)
            for i in loadNama:
                namaPIC = i['PIC']
                namaPen = i['Pen']
                PIC.append(namaPIC)
                Penerima.append(namaPen)
            PIC         = str(PIC).replace("[[[['","").replace("']]]]","").replace("[['","").replace("']]","")
            Penerima    = str(Penerima).replace("[[[['","").replace("']]]]","").replace("[['","").replace("']]","")

           
            #==============================================================================

            dbs = databaseCMS.db_scheduling()
            dbsC = dbs.cursor()

            dbsC.execute('UPDATE t_runningLog SET run_startTime ="'+waktuRun+'",\
                                 run_status = "R" WHERE report_id = "'+kode_laporan+'"\
                                    AND run_date ="'+str(tglRun)+'" ')
            dbs.commit()

            dbs.close()
            dbsC.close()




            db = databaseCMS.db_request()
            cursor = db.cursor(buffered = True)


            # GET AND EXECUTE QUERY
            getQ = requests.get('http://127.0.0.1:5002/getQuery/'+kode_laporan)
            qResp = json.dumps(getQ.json())
            loadQ = json.loads(qResp)

            listQuery = []
            for i in loadQ:
                reportId    = i['reportId']
                quer        = i['query']
                qno         = i['query_no']

                listQuery.append(quer)

            print('list Query: ',listQuery)
            lengthOfQuery = len(listQuery)

            try:
                for i in range (lengthOfQuery):
                    sql2 = listQuery[i]
                    cursor.execute(sql2)
                    
                    
                result = cursor.fetchall()
            except Exception as e:
                err = {
                'error' : str(e)
                }

                print(err['error'])

                dbs = databaseCMS.db_scheduling()
                cursor = dbs.cursor()
                cursor.execute('UPDATE t_runningLog SET run_endTime ="'+waktuRun+'",\
                                run_status="G", error_deskripsi="'+str(e)+'" WHERE report_id = "'+kode_laporan+'"\
                                AND run_date ="'+str(tglRun)+'" ')
                dbs.commit()

                dbs.close()
                cursor.close()

                return  json.dumps(err),400

            #HASIL DARI EXECUTE QUERY
            toExcel = []
            for i in result:
                toExcel.append(i)


            namaFileExcel =  kode_laporan+'_'+loadDetailReport[5]+datetime.datetime.now().strftime('%d%m%Y')

            

            if not os.path.exists(app.config['FOLDER_SCHEDULE']):
                os.makedirs(app.config['FOLDER_SCHEDULE'])

            workbook = xlsxwriter.Workbook(app.config['FOLDER_SCHEDULE']+'/%s.xls'% (namaFileExcel))
            worksheet = workbook.add_worksheet()

            ##############style###############
            font_size       = workbook.add_format({'font_size':8})
            font_size.set_font_name('Times New Roman')

            format_header   = workbook.add_format({'font_size':8,'top':1,'bottom':1,'bold':True})
            format_header.set_font_name('Times New Roman')

            category_style  = workbook.add_format({'font_size':8,'align':'right'})
            category_style.set_font_name('Times New Roman')

            merge_format    = workbook.add_format({
                'bold':2,
                'align' : 'center',
                'valign' : 'vcenter',
                'font_size':10})
            merge_format.set_font_name('Times New Roman')

            bold            = workbook.add_format({'bold':True,'font_size':8})
            bold.set_font_name('Times New Roman')
            ##################################


            #=======================[HEADER]==================================

            getDetH = requests.get('http://127.0.0.1:5002/getDetailH/'+kode_laporan)
            detHResp = json.dumps(getDetH.json())
            loadDetailH = json.loads(detHResp)

            countHeader     = []
            lebar           = []
            listKolom       = []
            lokasiHeader    = []
            for i in loadDetailH:
                namaKolom   = i['namaKolom']
                lokasiKolom = i['lokasi']
                formatKolom = i['formatKolom']
                leb         = i['lebarKolom']
            
                listKolom.append(namaKolom)
                lebar.append(leb)
                lokasiHeader.append(lokasiKolom)
                countHeader.append(namaKolom)
            

            listKolom2 = len(listKolom)
            countHeader2 = len(countHeader)

            print('list Kolom: ',listKolom)
            print('list Lebar: ',lebar)

            
            data = []
            data = toExcel



            row = 0
            kol = 0

            kolom   = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
            row2    = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]


            kolomList = (kolom[0:countHeader2])
            rowList = (row2[0:countHeader2])
            j = 1

            #ini untuk menulis header

            #sebelumnya for i in countHeader

            lok = 0
            for i in (listKolom): 
                worksheet.write(lokasiHeader[lok],i,format_header)
                lok = lok + 1
                count_header = count_header + 1

            #end menulis header
            ##########################
            lengthOfData = [x[0] for x in data]
            lengthOfData2 = len(lengthOfData)
            num = 1
            for i in range(lengthOfData2+1): #untuk menulis penomoran 1 s/d banyak data
                if (i == 0):
                    worksheet.write(row + 7,kol,'No',format_header)
                    row = row + 1
                else:
                    worksheet.write(row + 7,kol,num,font_size)
                    row = row + 1
                    num = num + 1

            m = 1
            row2 = 0

            for i in range(lengthOfData2): #untuk menulis data
                worksheet.write_row(row2+8,kol+m,data[i],font_size)
                row2 = row2 + 1





            ###########################################
            #Mengatur bagian atas dari laporan
            
            listMaxCol = ['A1','B1','C1','D1','E1','F1','G1','H1','I1','J1','K1','L1','N1','O1','P1']
            maxCol = (listMaxCol[countHeader2])

            

            nOrg = requests.get('http://127.0.0.1:5001/getNamaOrg/'+loadDetailReport[5])
            orgResp = json.dumps(nOrg.json())
            loadNamaOrg = json.loads(orgResp)
            for i in loadNamaOrg:
                namaOrg = i['org_name']


            print('loadDetailReport: ',loadDetailReport)
            
            
            
            listColWidth =['B','C','D','E','F','G','H','I','J','K','L','N','O','P']
            colWidth = (listColWidth[0:countHeader2])
            
            print('colWidth: ',colWidth)
            print('CH: ',countHeader)
            print('CH2: ',countHeader2)
            print('MaxCol: ',maxCol)


            worksheet.merge_range('A1:%s'%(maxCol),'%s'%(namaOrg), merge_format) 
            worksheet.write('A2','%s' % (loadDetailReport[1]),bold ) #nama report
            worksheet.write('A3','Report Code : %s' % (loadDetailReport[0]),font_size) #kode report
            worksheet.write('A4','PIC : %s' % (PIC),font_size)
            worksheet.write('A5','Penerima : %s' % (Penerima),font_size)
            worksheet.write('A6','Filter : %s' % (loadDetailReport[2]), bold ) #filter
            worksheet.write('A7','Period : %s' % (loadDetailReport[3]),font_size) #periode
            
            #penulisan printed date

            worksheet.write(2,2,'Printed Date : %s' % (datetime.datetime.now().replace(microsecond=0)),font_size)

            #Untuk mengatur lebar Kolom
            for i in range(countHeader2):
                worksheet.set_column('%s:%s'%(colWidth[i],colWidth[i]), int(lebar[i]))

            
            ###########################################

            #======================[ FOOTER ]================================

            getF = requests.get('http://127.0.0.1:5002/getDetailF/'+kode_laporan)
            FResp = json.dumps(getF.json())
            detailFooter = json.loads(FResp)

            kolomFooter     = []
            lokasiFooter    = []
            urutanFooter    = []
            for row in detailFooter:
                kodeReportF     = row['reportId']
                namaKolomF      = row['namaKolom']
                lokasi          = row['lokasi']
                urutan          = row['urutan'] 

                kolomFooter.append(namaKolomF)
                lokasiFooter.append(lokasi)
                urutanFooter.append(urutan)

            lokasiCurr = []
            countOfFooter = len(lokasiFooter)


            l = 0
            for i in range(countOfFooter):
                if (lokasi[l] == 'B'):
                    lokasiCurr.append(1)
                elif(lokasi[l] == 'C'):
                    lokasiCurr.append(2)
                elif(lokasi[l] == 'D'):
                    lokasiCurr.append(3)
                elif(lokasi[l] == 'E'):
                    lokasiCurr.append(4)
                elif(lokasi[l] == 'F'):
                    lokasiCurr.append(5)
                elif(lokasi[l] == 'G'):
                    lokasiCurr.append(6)
                elif(lokasi[l] == 'H'):
                    lokasiCurr.append(7)
                elif(lokasi[l] == 'I'):
                    lokasiCurr.append(8)
                elif(lokasi[l] == 'J'):
                    lokasiCurr.append(9)
                elif(lokasi[l] == 'K'):
                    lokasiCurr.append(10)
                elif(lokasi[l] == 'L'):
                    lokasiCurr.append(11)
                elif(lokasi[l] == 'M'):
                    lokasiCurr.append(12)
                elif(lokasi[l] == 'N'):
                    lokasiCurr.append(13)
                elif(lokasi[l] == 'O'):
                    lokasiCurr.append(14)
                elif(lokasi[l] == 'P'):
                    lokasiCurr.append(15)
                l = l + 1

            countFooter = loadDetailReport[4]
            lokasiCurr2 = []
            l = 0

            print(kolomFooter)

            for i in range(countOfFooter):
                if (lokasi[l] == 'B'):
                    lokasiCurr2.append('B')
                elif(lokasi[l] == 'C'):
                    lokasiCurr2.append('C')
                elif(lokasi[l] == 'D'):
                    lokasiCurr2.append('D')
                elif(lokasi[l] == 'E'):
                    lokasiCurr2.append('E')
                elif(lokasi[l] == 'F'):
                    lokasiCurr2.append('F')
                elif(lokasi[l] == 'G'):
                    lokasiCurr2.append('G')
                elif(lokasi[l] == 'H'):
                    lokasiCurr2.append('H')
                elif(lokasi[l] == 'I'):
                    lokasiCurr2.append('I')
                elif(lokasi[l] == 'J'):
                    lokasiCurr2.append('J')
                elif(lokasi[l] == 'K'):
                    lokasiCurr2.append('K')
                elif(lokasi[l] == 'L'):
                    lokasiCurr2.append('L')
                elif(lokasi[l] == 'M'):
                    lokasiCurr2.append('M')
                elif(lokasi[l] == 'N'):
                    lokasiCurr2.append('N')
                elif(lokasi[l] == 'O'):
                    lokasiCurr2.append('O')
                elif(lokasi[l] == 'P'):
                    lokasiCurr2.append('P')
                l = l + 1

            totalRow = len(lengthOfData)
            lokasiCurr2Len = len(lokasiCurr2)
            # print(lokasiCurr2[0])
            print(countFooter)

            if countFooter == '1':
                for i in range(lokasiCurr2Len):
                    print(kolomFooter[0])
                    worksheet.write(row2+8,i,'',format_header)
                    worksheet.write(row2+8,1,'%s' % (kolomFooter[0]),format_header)
                    worksheet.write(row2+8,lokasiCurr[i],'=SUM(%s9:%s%s)'% (lokasiCurr2[i],lokasiCurr2[i],totalRow+8),format_header)





            # Penulisan Process Time
            worksheet.write(row2+9,1,'Process Time : s/d %s' % (datetime.datetime.now().replace(microsecond=0)),font_size)

            #Penulisan Since
            worksheet.write(row2+10,1,'Since : %s' % (loadDetailReport[7]),font_size)

            #Penulisan Schedule
            getSch = requests.get('http://127.0.0.1:5002/getSchedule/'+kode_laporan)
            getSchResp = json.dumps(getSch.json())
            loadGetSch = json.loads(getSchResp)

            if loadGetSch:
                worksheet.write(row2+11,1,'Schedule : %s %s %s' % (loadGetSch[1],loadGetSch[0],loadGetSch[2]),font_size)

            #Penulisan Creator
            worksheet.write(row2+9,count_header - 1,'CREATOR : %s' % (loadDetailReport[8]),font_size)


            workbook.close()


            try:
                db      = databaseCMS.db_scheduling()
                cursor  = db.cursor()
                cursor.execute('UPDATE t_runningLog SET run_endTime = "'+waktuRun+'",\
                                run_status="B" WHERE report_id = "'+kode_laporan+'"\
                                AND run_date ="'+str(tglRun)+'" ')
                db.commit()
            except Error as e :
                print("Error while connecting file MySQL", e)
            finally:
                    #Closing DB Connection.
                        if(db.is_connected()):
                            cursor.close()
                            db.close()
                        print("MySQL connection is closed")

            eml = requests.get('http://127.0.0.1:5002/listPIC/'+kode_laporan)
            emlResp = json.dumps(eml.json())
            loadEml = json.loads(emlResp)

            listEmailPIC = []
            listEmailPen = []
            for k in loadEml:
                listEmPIC = k['PIC']
                listEmPen = k['Pen']
                listEmailPIC.append(listEmPIC)
                listEmailPen.append(listEmPen)

            
            print(listEmailPIC)
            print(listEmailPen)

            dataSend = []
            dataUpdate= {
            'kode_laporan'  : kode_laporan,
            'org_id'        : loadDetailReport[5],
            'namaFile'      : namaFileExcel,
            'PIC'           : ', '.join(listEmailPIC),
            'Penerima'      : ', '.join(listEmailPen),
            'reportJudul'   : loadDetailReport[1]
            }
            dataSend.append(dataUpdate)
            dataSendMS4 =  json.dumps(dataSend)

            requests.post('http://127.0.0.1:5004/updateReport/'+dataSendMS4)

        except Exception as e:
            
            err = {
            'error' : str(e)
            }

            print(err['error'])

            
            db =databaseCMS.db_scheduling()
            cursor = db.cursor()
            cursor.execute('UPDATE t_runningLog SET run_endTime ="'+waktuRun+'",\
                            run_status="G", error_deskripsi="'+str(e)+'" WHERE report_id = "'+kode_laporan+'"\
                            AND run_date ="'+str(tglRun)+'" ')
            db.commit()

            return  json.dumps(err)
            
            





    elif jmlHead == '2':
        try:
            count_header = 0


            PIC = []
            Penerima = []
            # MENDAPATKAN LIST PIC / PENERIMA SESUAI DENGAN LAPORAN
            getNama = requests.get('http://127.0.0.1:5001/getNamaUser/'+kode_laporan)
            namaResp = json.dumps(getNama.json())
            loadNama = json.loads(namaResp)
            for i in loadNama:
                namaPIC = i['PIC']
                namaPen = i['Pen']
                PIC.append(namaPIC)
                Penerima.append(namaPen)
            PIC         = str(PIC).replace("[[[['","").replace("']]]]","").replace("[['","").replace("']]","")
            Penerima    = str(Penerima).replace("[[[['","").replace("']]]]","").replace("[['","").replace("']]","")

            dbs = databaseCMS.db_scheduling()
            dbsC = dbs.cursor()

            dbsC.execute('UPDATE t_runningLog SET run_startTime ="'+waktuRun+'",\
                                 run_status = "R" WHERE report_id = "'+kode_laporan+'"\
                                    AND run_date ="'+str(tglRun)+'" ')
            dbs.commit()

            dbs.close()
            dbsC.close()
            

            
            
            #==============================================================================

            db = databaseCMS.db_template()
            cursor = db.cursor(buffered = True)







            # GET AND EXECUTE QUERY
            getQ = requests.get('http://127.0.0.1:5002/getQuery/'+kode_laporan)
            qResp = json.dumps(getQ.json())
            loadQ = json.loads(qResp)

            listQuery = []
            for i in loadQ:
                reportId    = i['reportId']
                quer        = i['query']
                qno         = i['query_no']

                listQuery.append(quer)
            print('list Query: ',listQuery)
            lengthOfQuery = len(listQuery)

            try:
                for i in range (lengthOfQuery):
                    sql2 = listQuery[i]
                    cursor.execute(sql2)
                    
                    
                result = cursor.fetchall()
            except Exception as e:
                err = {
                'error' : str(e)
                }

                print(err['error'])

                dbs = databaseCMS.db_scheduling()
                cursor = dbs.cursor()
                cursor.execute('UPDATE t_runningLog SET run_endTime ="'+waktuRun+'",\
                                run_status="G", error_deskripsi="'+str(e)+'" WHERE report_id = "'+kode_laporan+'"\
                                AND run_date ="'+str(tglRun)+'" ')
                dbs.commit()

                return  json.dumps(err) 

            #HASIL DARI EXECUTE QUERY
            toExcel = []
            for i in result:
                toExcel.append(i)

             


            namaFileExcel =  kode_laporan+'_'+loadDetailReport[5]+datetime.datetime.now().strftime('%d%m%Y')

            

            if not os.path.exists(app.config['FOLDER_SCHEDULE']):
                os.makedirs(app.config['FOLDER_SCHEDULE'])

            workbook = xlsxwriter.Workbook(app.config['FOLDER_SCHEDULE']+'/%s.xls'% (namaFileExcel))
            worksheet = workbook.add_worksheet()

            ##############style###############
            font_size = workbook.add_format({'font_size':8})
            font_size.set_font_name('Times New Roman')

            format_header = workbook.add_format({'font_size':8,'top':1,'bottom':1,'bold':True})
            format_header.set_font_name('Times New Roman')

            format_headerMid = workbook.add_format({'font_size':8,'top':1,'bold':True,'align' : 'center','valign' : 'center'})
            format_headerMid.set_font_name('Times New Roman')

            category_style = workbook.add_format({'font_size':8,'align':'right'})
            category_style.set_font_name('Times New Roman')

            merge_format = workbook.add_format({
                'bold':2,
                'align' : 'center',
                'valign' : 'vcenter',
                'font_size':10})
            merge_format.set_font_name('Times New Roman')

            bold = workbook.add_format({'bold':True,'font_size':8})
            bold.set_font_name('Times New Roman')
            ##################################


            #=========================================================

            getDetH = requests.get('http://127.0.0.1:5002/getDetailH/'+kode_laporan)
            detHResp = json.dumps(getDetH.json())
            loadDetailH1 = json.loads(detHResp)

            getDetH2 = requests.get('http://127.0.0.1:5002/getDetailH2/'+kode_laporan)
            detHResp2 = json.dumps(getDetH2.json())
            loadDetailH2 = json.loads(detHResp2)


            ########## HEADER 1 #############

            countHeader = []
            lebar       = []
            listKolom   = []
            lokasiH1    = []
            
            for i in loadDetailH1:
                namaKolom   = i['namaKolom']
                lokasiKolom = i['lokasi']
                formatKolom = i['formatKolom']
                leb         = i['lebarKolom']
            
            
                listKolom.append(namaKolom)
                lebar.append(leb)
                lokasiH1.append(lokasiKolom)
                
                countHeader.append(namaKolom)
            
            listKolom2  = len(listKolom)
            countHeader2 = len(countHeader)

            
            mCell = i['formatMerge'].replace('-',':').replace(' ','').split(',')
            

            

            print('merge Cell: ',mCell)
            print('list Kolom1: ',listKolom)
            print('list Lebar1: ',lebar)


            ##########  HEADER 2 ############



            listKolomHeader2    = []
            lebarH2             = []
            lokasiH2            = []
            for i in loadDetailH2:
                namaKolomH2     = i['namaKolom']
                lokasi2         = i['lokasi']
                formatKolomH2   = i['formatKolom']
                lebH2           = i['lebarKolom']

                listKolomHeader2.append(namaKolomH2)
                lebarH2.append(lebH2)
                lokasiH2.append(lokasi2)

            countHeaderH2 = len(listKolomHeader2)
            print('list Kolom2: ',listKolomHeader2)
            print('list Lebar2: ',lebarH2)
            print('lokasi2: ', lokasiH2)

            
            data = []
            data = toExcel



            row = 0
            kol = 0

            kolom   = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
            row2    = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]


            kolomList   = (kolom[0:countHeader2])
            rowList     = (row2[0:countHeader2])
            j = 1



            # MERGE CELL
            for i in range(len(mCell)):
                worksheet.merge_range('%s'%(mCell[i]),'%s'%(''), format_headerMid)

            #ini untuk menulis header
            lok = 0
            #HEADER 1
            for i in (listKolom): 
                worksheet.write(lokasiH1[lok],i,format_headerMid)
                lok             = lok + 1
                count_header    = count_header + 1

            #HEADER 2
            lok2 = 0
            for x in (listKolomHeader2):
                worksheet.write(lokasiH2[lok2], x,format_header)
                lok2            = lok2 + 1
                count_header    = count_header + 1

            #end menulis header
            ##########################

            








            lengthOfData = [x[0] for x in data]
            lengthOfData2 = len(lengthOfData)


            num = 1
            for i in range(lengthOfData2+1): #untuk menulis penomoran 1 s/d banyak data
                if (i == 0):
                    worksheet.write(row + 7,kol,'No',format_header)
                    row = row + 1
                else:
                    worksheet.write(row + 8,kol,num,font_size)
                    row = row + 1
                    num = num + 1

            m = 1
            row2 = 0

            for i in range(lengthOfData2): #untuk menulis data
                worksheet.write_row(row2+9,kol+m,data[i],font_size)
                row2 = row2 + 1





            ###########################################
            #Mengatur bagian atas dari laporan
            
            listMaxCol = ['A1','B1','C1','D1','E1','F1','G1','H1','I1','J1','K1','L1','N1','O1','P1']
            maxCol = (listMaxCol[countHeader2])

            

            nOrg = requests.get('http://127.0.0.1:5001/getNamaOrg/'+loadDetailReport[5])
            orgResp = json.dumps(nOrg.json())
            loadNamaOrg = json.loads(orgResp)
            for i in loadNamaOrg:
                namaOrg = i['org_name']


            print(loadDetailReport)
            
            
            
            listColWidth =['B','C','D','E','F','G','H','I','J','K','L','N','O','P']
            colWidth = (listColWidth[0:countHeader2])
            
            print(colWidth)
            print(countHeader)
            print(countHeader2)
            worksheet.merge_range('A1:%s'%(maxCol),'%s'%(namaOrg), merge_format) 
            worksheet.write('A2','%s' % (loadDetailReport[1]),bold ) #nama report
            worksheet.write('A3','Report Code : %s' % (loadDetailReport[0]),font_size) #kode report
            worksheet.write('A4','PIC : %s' % (PIC),font_size)
            worksheet.write('A5','Penerima : %s' % (Penerima),font_size)
            worksheet.write('A6','Filter : %s' % (loadDetailReport[2]), bold ) #filter
            worksheet.write('A7','Period : %s' % (loadDetailReport[3]),font_size) #periode
            
            #======================[ FOOTER ]================================
            
            getF = requests.get('http://127.0.0.1:5002/getDetailF/'+kode_laporan)
            FResp = json.dumps(getF.json())
            detailFooter = json.loads(FResp)

            kolomFooter     = []
            lokasiFooter    = []
            urutanFooter    = []
            for row in detailFooter:
                kodeReportF = row['reportId']
                namaKolomF  = row['namaKolom']
                lokasi      = row['lokasi']
                urutan      = row['urutan'] 

                kolomFooter.append(namaKolomF)
                lokasiFooter.append(lokasi)
                urutanFooter.append(urutan)

            lokasiCurr      = []
            countOfFooter   = len(lokasiFooter)


            l = 0
            for i in range(countOfFooter):
                if (lokasi[l] == 'B'):
                    lokasiCurr.append(1)
                elif(lokasi[l] == 'C'):
                    lokasiCurr.append(2)
                elif(lokasi[l] == 'D'):
                    lokasiCurr.append(3)
                elif(lokasi[l] == 'E'):
                    lokasiCurr.append(4)
                elif(lokasi[l] == 'F'):
                    lokasiCurr.append(5)
                elif(lokasi[l] == 'G'):
                    lokasiCurr.append(6)
                elif(lokasi[l] == 'H'):
                    lokasiCurr.append(7)
                elif(lokasi[l] == 'I'):
                    lokasiCurr.append(8)
                elif(lokasi[l] == 'J'):
                    lokasiCurr.append(9)
                elif(lokasi[l] == 'K'):
                    lokasiCurr.append(10)
                elif(lokasi[l] == 'L'):
                    lokasiCurr.append(11)
                elif(lokasi[l] == 'M'):
                    lokasiCurr.append(12)
                elif(lokasi[l] == 'N'):
                    lokasiCurr.append(13)
                elif(lokasi[l] == 'O'):
                    lokasiCurr.append(14)
                elif(lokasi[l] == 'P'):
                    lokasiCurr.append(15)
                l = l + 1

            countFooter = loadDetailReport[4]
            lokasiCurr2 = []
            l = 0

            print(kolomFooter)

            for i in range(countOfFooter):
                if (lokasi[l] == 'B'):
                    lokasiCurr2.append('B')
                elif(lokasi[l] == 'C'):
                    lokasiCurr2.append('C')
                elif(lokasi[l] == 'D'):
                    lokasiCurr2.append('D')
                elif(lokasi[l] == 'E'):
                    lokasiCurr2.append('E')
                elif(lokasi[l] == 'F'):
                    lokasiCurr2.append('F')
                elif(lokasi[l] == 'G'):
                    lokasiCurr2.append('G')
                elif(lokasi[l] == 'H'):
                    lokasiCurr2.append('H')
                elif(lokasi[l] == 'I'):
                    lokasiCurr2.append('I')
                elif(lokasi[l] == 'J'):
                    lokasiCurr2.append('J')
                elif(lokasi[l] == 'K'):
                    lokasiCurr2.append('K')
                elif(lokasi[l] == 'L'):
                    lokasiCurr2.append('L')
                elif(lokasi[l] == 'M'):
                    lokasiCurr2.append('M')
                elif(lokasi[l] == 'N'):
                    lokasiCurr2.append('N')
                elif(lokasi[l] == 'O'):
                    lokasiCurr2.append('O')
                elif(lokasi[l] == 'P'):
                    lokasiCurr2.append('P')
                l = l + 1

            totalRow = len(lengthOfData)
            lokasiCurr2Len = len(lokasiCurr2)
            # print(lokasiCurr2[0])
            print(countFooter)

            if countFooter == '1':
                for i in range(lokasiCurr2Len):
                    print(kolomFooter[0])
                    worksheet.write(row2+9,i,'',format_header)
                    worksheet.write(row2+9,1,'%s' % (kolomFooter[0]),format_header)
                    worksheet.write(row2+9,lokasiCurr[i],'=SUM(%s9:%s%s)'% (lokasiCurr2[i],lokasiCurr2[i],totalRow+8),format_header)




            #penulisan printed date

            worksheet.write(2,2,'Printed Date : %s' % (datetime.datetime.now().replace(microsecond=0)),font_size)

            #Untuk mengatur lebar Kolom
            for i in range(countHeader2):
                worksheet.set_column('%s:%s'%(colWidth[i],colWidth[i]), int(lebar[i]))



            # Penulisan Process Time
            worksheet.write(row2+11,1,'Process Time : s/d %s' % (datetime.datetime.now().replace(microsecond=0)),font_size)

            #Penulisan Since
            worksheet.write(row2+12,1,'Since : %s' % (loadDetailReport[7]),font_size)

            #Penulisan Schedule
            getSch = requests.get('http://127.0.0.1:5002/getSchedule/'+kode_laporan)
            getSchResp = json.dumps(getSch.json())
            loadGetSch = json.loads(getSchResp)

            if loadGetSch:

                worksheet.write(row2+13,1,'Schedule : %s %s %s' % (loadGetSch[1],loadGetSch[0],loadGetSch[2]),font_size)
            else:
                worksheet.write(row2+13,1,'Schedule : -', font_size)
            #Penulisan Creator
            worksheet.write(row2+11,count_header - 1,'CREATOR : %s' % (loadDetailReport[8]),font_size)


            workbook.close()

            eml     = requests.get('http://127.0.0.1:5002/listPIC/'+kode_laporan)
            emlResp = json.dumps(eml.json())
            loadEml = json.loads(emlResp)

            listEmailPIC = []
            listEmailPen = []
            for k in loadEml:
                listEmPIC = k['PIC']
                listEmPen = k['Pen']
                listEmailPIC.append(listEmPIC)
                listEmailPen.append(listEmPen)

            
            print(listEmailPIC)
            print(listEmailPen)

            dataSend = []
            dataUpdate= {
            'kode_laporan'  : kode_laporan,
            'org_id'        : loadDetailReport[5],
            'namaFile'      : namaFileExcel,
            'PIC'           : ', '.join(listEmailPIC),
            'Penerima'      : ', '.join(listEmailPen),
            'reportJudul'   : loadDetailReport[1]
            }
            dataSend.append(dataUpdate)
            dataSendMS4 =  json.dumps(dataSend)

            requests.post('http://127.0.0.1:5004/updateReport/'+dataSendMS4)


            try:
                db = databaseCMS.db_scheduling()
                cursor = db.cursor()
                cursor.execute('UPDATE t_runningLog SET run_endTime = "'+waktuRun+'",\
                                run_status="B" WHERE report_id = "'+kode_laporan+'"\
                                AND run_date ="'+str(tglRun)+'" ')
                db.commit()
            except Error as e :
                print("Error while connecting file MySQL", e)
            finally:
                    #Closing DB Connection.
                        if(db.is_connected()):
                            cursor.close()
                            db.close()
                        print("MySQL connection is closed")


        except Exception as e:
            
            err = {
            'error' : str(e)
            }

            print(err['error'])

            
            db =databaseCMS.db_scheduling()
            cursor = db.cursor()
            cursor.execute('UPDATE t_runningLog SET run_endTime ="'+waktuRun+'",\
                            run_status="G", error_deskripsi="'+str(e)+'" WHERE report_id = "'+kode_laporan+'"\
                            AND run_date ="'+str(tglRun)+'" ')
            db.commit()

            return  json.dumps(err)

-------------------------------------------ms2insertQuery.html--------------------------------------------------------

<html>

<head>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
  <title> Add New Query </title>
</head>

<body bgcolor="#F0FFF0">

  {% if session.get('position') == 'Admin' %}
        {% extends "NAVBARPROG.html" %}
        {% set active_page = 'query' %}

  {% else %}

        {% extends "NAVBARSPV.html" %}
        {% set active_page = 'query' %}
  {% endif %}




{% block content %}
<!-- BATAS MENUBAR -->
<br><br>
{% if editQ %}

    <div class ="judul">
      <center>EDIT QUERY</center>
    </div>

<center>
<div class="containInsert">
    <form action="/sendNewQuery" method = "POST">
    <div class ="rowF">
        <label for="kodeReport">Report Code : </label>
        <div class="column">
          <input type="text" name="kodLap" value="{{kode_laporan}}" >
        </div>
    </div>
          
        
      <br><br>
      {% for i in range (0, 7) %}
      <div class="rowF">
        {%if editQ[i] != '' and editQ[i] != none %}
          <label for="kodeReport">Query {{i+1}} : </label>
          <div class ="column">
            <textarea  id = "q{{i+1}}" class = "textQuery" name="query{{i+1}}" style="width: 400px; height: 175px">{{editQ[i][0]}}</textarea>
          </div>
      
        {%else%}
  
          <label for="kodeReport">Query {{i+1}} : </label>
          <div class ="column">
            <textarea  id = "q{{i+1}}" class = "textQuery" name="query{{i+1}}" style="width: 400px; height: 175px"></textarea>
          </div>

        {% endif %}
        
        {%if editQ[i+7] != '' and editQ[i+7] != none %}
          <label for="kodeReport">Query {{i+8}} : </label>
          <div class ="column">
            <textarea  id = "q{{i+8}}" class = "textQuery" name="query{{i+8}}" style="width: 400px; height: 175px">{{editQ[i+7][0]}}</textarea>
          </div>
        {%else%}

          <label for="kodeReport">Query {{i+8}} : </label>
          <div class ="column">
            <textarea  id = "q{{i+8}}" class = "textQuery" name="query{{i+8}}" style="width: 400px; height: 175px"></textarea>
          </div>
        {%endif%}
        <br>
      </div>
      {%endfor%}
</center>
</div>

<center>
      <div class="colBut">
      <button class="submit">Save</button></div>
      </form>

      <div class="colBut">
        <form action="/admin">
          <button class="submitRed">Cancel</button></div>
</center>      

  {% else %}
  

  <br><br>
    <form action="/sendNewQuery" method = "POST">
    <div class ="judul">
      <center>INSERT QUERY</center>
    </div>

<div class="containInsert">
    <div class ="rowF">
      <label for="kodeReport">Pilih Report: </label>
      <div class="column">
        <select name="kodLap">
          {% for row in kodeNewQuery %}
            <option name="kodLap" value="{{row.reportId}}">{{row.reportId}}</option>
          {% endfor %}        
        </select>
      </div>
    </div>
            
  <br><br>


    <div class="rowF">
      <label for="kodeReport">Query 1 : </label>
      <div class ="column">
        <textarea  id = "qi1" class = "textQuery" name="query1" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 8 : </label>
      <div class ="column">
        <textarea  id = "qi8" class = "textQuery" name="query8" style="width: 400px; height: 175px"></textarea>
      </div>
    </div>
<br>

    <div class="rowF">
      <label for="kodeReport">Query 2 : </label>
      <div class ="column">
        <textarea  id = "qi2" class = "textQuery" name="query2" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 9 : </label>
      <div class ="column">
        <textarea  id = "qi9" class = "textQuery" name="query9" style="width: 400px; height: 175px"></textarea>    
      </div>
    </div>

<br>

    <div class="rowF">
      <label for="kodeReport">Query 3 : </label>
      <div class ="column">
        <textarea  id = "qi3" class = "textQuery" name="query3" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 10 : </label>
      <div class ="column">
        <textarea  id = "qi10" class = "textQuery" name="query10" style="width: 400px; height: 175px"></textarea>
      </div>
    </div>

<br>

    <div class="rowF">
      <label for="kodeReport">Query 4 : </label>
      <div class ="column">
        <textarea  id = "qi4" class = "textQuery" name="query4" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 11 : </label>
      <div class ="column">
          <textarea  id = "qi11" class = "textQuery" name="query11" style="width: 400px; height: 175px"></textarea>
      </div>
    </div>

<br>

    <div class="rowF">
      <label for="kodeReport">Query 5 : </label>
      <div class ="column">
        <textarea  id = "qi5" class = "textQuery" name="query5" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 12 : </label>
        <div class ="column">
          <textarea  id = "qi12" class = "textQuery" name="query12" style="width: 400px; height: 175px"></textarea>
        </div>
    </div>

<br>

    <div class="rowF">
      <label for="kodeReport">Query 6 : </label>
      <div class ="column">
        <textarea  id = "qi6" class = "textQuery" name="query6" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 13 : </label>
      <div class ="column">
        <textarea  id = "qi13" class = "textQuery" name="query13" style="width: 400px; height: 175px"></textarea>
      </div>
    </div>

<br>

    <div class="rowF">
      <label for="kodeReport">Query 7 : </label>
      <div class ="column">
        <textarea  id = "qi7" class = "textQuery" name="query7" style="width: 400px; height: 175px"></textarea>
      </div>

      <label for="kodeReport">Query 14 : </label>
        <div class ="column">
          <textarea  id = "qi14" class = "textQuery" name="query14" style="width: 400px; height: 175px"></textarea>
        </div>
    </div>
</div>

<center>
  <div class="colBut">
    <button class="submit" id="save" onclick="sukses()">Save</button>
  </div></form>

  <div class="colBut">
    <form action="/admin">
    <button class="submitRed">Cancel</button></form></div>
 
</center>


{% endif %}

{% endblock %}

</body>
</html>
{% block script %}
<script type="text/javascript">

  function sukses(){
      var query1 = document.getElementById("qi1");
      var query2 = document.getElementById("qi2");
      var query3 = document.getElementById("qi3");
      var query4 = document.getElementById("qi4");
      var query5 = document.getElementById("qi5");
      var query6 = document.getElementById("qi6");
      var query7 = document.getElementById("qi7");
      var query8 = document.getElementById("qi8");
      var query9 = document.getElementById("qi9");
      var query10 = document.getElementById("qi10")
      var query11 = document.getElementById("qi11");
      var query12 = document.getElementById("qi12");
      var query13 = document.getElementById("qi13");
      var query14 = document.getElementById("qi14");
      var test = document.getElementById("save")

      if(query1 != None){
        alert("Query berhasil di input")
        return false;
      }
      return true;

  }

</script>
{% endblock %}


-----------------------------------------------ms2editSchedule2.html---------------------------------------------

<html>
<head>
<link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
<!-- <style>
  #myList {width: 200; list-style: none; margin: 0; auto 0 auto;}
  #myList li {list-style-type: none; float: left; width: 100px;}
  #myList li label{width: 200px; padding: 2px 10px 0 8px; display: inline-block;}
</style> -->

  <title> Edit Schedule </title>
</head>

<body bgcolor="#F0FFF0">

{% if session.get('position') == 'Admin' %}
  {% extends "NAVBARPROG.html" %}
  {% set active_page = 'schedule' %}

{% else %}

  {% extends "NAVBARSPV.html" %}
  {% set active_page = 'schedule' %}

{% endif %}
    

{% block content %}
    <br><br>
    
<div class ="judul">
  <center>EDIT SCHEDULE</center>
</div>



{% if detailSchedule %}

  <form action="/sendEditSchedule" method="POST">
<div class="containInsert">

<div class ="row">
  <div class ="col-35">
    <label for="kodeRep">Kode Report : </label>
  </div>
  
  <div class="col-55">
    {% if kode_laporan %}
      <input type ="text" id="kodLap2" name="kodLap2" value="{{kode_laporan}}">
    {% endif %}
  </div>
</div>

<br>

{% for row in detailSchedule %}
<div class ="row">
  <div class ="col-35">
    <label for="header">Header : </label>
  </div>

  <div class="col-55">
    <input type="text" name="header" value="{{row.report_judul}}">
  </div>
</div>

<div class ="row">
  <div class ="col-35">
    <label for="keterangan">Keterangan : </label>
  </div>

  <div class="col-55">
    <textarea id="keterangan" name="keterangan">{{row.report_deskripsi}}</textarea>
  </div>
</div>

<div class ="row">
  <div class ="col-35">
    <label for="note">Note : </label>
  </div>

  <div class="col-55">
    <input type="text" id="note" name="note" value="{{row.sch_note}}">
  </div>
</div>

<!-- <div class ="row">
  <div class ="col-15">
    <label for="penerima">PIC : </label>
  </div>
    <textarea id="PIC" name="PIC">{{detailSchedule[3]}}</textarea>
</div>

<div class ="row">
  <div class ="col-15">
    <label for="penerima">Dikirim ke : </label>
  </div>
    <textarea id="penerima" name="penerima">{{detailSchedule[4]}}</textarea>
</div> -->

<div class ="row">
  <div class ="col-35">
    <label for="PIC">PIC: </label>
  </div>

  <div class ="myBoxPIC">
           
              <input type="text" id="myInput" onkeyup="funcSearchPIC()" placeholder="Search for names.." title="Type in a name">
              <table id="list">
                      <tr>
                        <th></th>
                        <th>User ID</th>
                        <th>Username</th>
                        <th>Email</th>
                      </tr>
                      
                      {% for liPIC in listPIC %}
                      

                      <tr>
                        
                        <td>
                          
                          {% if liPIC.Email in row.sch_PIC %}
                          <input type ="checkbox" name="{{liPIC.Id}}"  checked="checked"> 
                          {% else %}
                          <input type ="checkbox" name="{{liPIC.Id}}"> 
                          {% endif %}
                          
                        </td>
                        <td>{{liPIC.Id}}</td>
                        <td>{{liPIC.Name}}</td>
                        <td>{{liPIC.Email}}</td>


                       
                        
                      </tr>
                      {% endfor %}
              </table>
          
    </div>
</div>
<br>

<div class ="row">
  <div class ="col-35">
    <label for="Penerima">Penerima: </label>
  </div>
  
  <div class ="myBoxPIC">
           
              <input type="text" id="myInput1" onkeyup="funcSearchPen()" placeholder="Search for names.." title="Type in a name">
              <table id="listkedua">
                      <tr>
                        <th></th>
                        <th>User ID</th>
                        <th>Username</th>
                        <th>Email</th>
                      </tr>
                  
                      {% for liPen in listPen %}
                      <tr>
                        <td>
                          {% if liPen.Email in row.sch_Pen %}

                          <input type ="checkbox" name="{{liPen.Email}}" checked="checked">
                          {% else %}
                          <input type ="checkbox" name="{{liPen.Email}}">
                          {% endif %}

                        </td>
                        <td>{{liPen.Id}}</td>
                        <td>{{liPen.Name}}</td>
                        <td>{{liPen.Email}}</td>
                      </tr>
                      {% endfor %}
              </table>
          
  </div>
</div>


<div class ="row">
  <div class ="col-35">
    <label for="grouping">Grouping : </label>
  </div>

  <div class="col-55">
    <input type="text" id="grouping" name="grouping" value="{{row.sch_groupBy}}">
  </div>
</div>




<div class ="row">
  <div class ="col-35">
    <label for="grouping">Schedule : </label>
  </div>

  <div class="col-55">
    {% if row.sch_tanggal == '' %}
    <input type ="radio" id="dm" value="hb" name="rutin" onload="myFunction4('True')" onclick="myFunction2()" checked>Day+Month</input>
    <input type ="radio" id="dm2" value="tb" name="rutin" onclick ="myFunction3()">Date+Month</input>


    {% else %}
    <input type ="radio" id="dm" value="hb" name="rutin" onclick="myFunction2()">Day+Month</input>
    <input type ="radio" id="dm2" value="tb" name="rutin" onload="myFunction4('False')" onclick ="myFunction3()" checked>Date+Month</input>


    {% endif %}
  </div>
</div>

<br>


<div class ="row">
  <div class ="col-35" >

  </div  style = "display: inline;">

  <div class="col-55">
   <div class ="myBox">
          <div id="Month">
            {% for month in ['January','February','March','April','May','June','July','August','September','October','November','December'] %}
            <ol style="list-style: none;">
            <li>
              {% if month in row.sch_bulan %}
                <input type="checkbox" name="{{month[:3]}}" value="{{month}}" checked="checked">{{month}}
              {% else %}
                <input type="checkbox" name="{{month[:3]}}" value="{{month}}">{{month}}
              {% endif %}
            </li>
          </ol>
            {% endfor %}
          </div>
    </div>

    <div class ="myBox">
          <div id="Day">
            {% for day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] %}
            <ol style="list-style: none;">
            <li>
              {% if day in row.sch_hari %}
                <input type="checkbox" name="{{day[:3]}}" value="{{day}}" checked="checked">{{day}}
              {% else %}
                <input type="checkbox" name="{{day[:3]}}" value="{{day}}">{{day}}
              {% endif %}
            </li>
          </ol>
            {% endfor %}
          </div>
    
          <div id="Date">
                  {% for date in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10',
                  '11', '12', '13', '14', '15', '16', '17', '18', '19', '20',
                  '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'] %}
                  <ol style="list-style: none;">
                  <li>
                  
                  
                      {% if date in row.sch_tanggal %}
                      <input type="checkbox" name="{{date[:3]}}" value="{{date}}" checked="checked">{{date}}
                      {% else %}
                      <input type="checkbox" name="{{date[:3]}}" value="{{date}}">{{date}}
                      {% endif %}
                    
                   
                  </li>
                </ol>
                  {% endfor %}
          </div>
      </div>
    </div>
</div>



<div class ="row">
  <div class ="col-35">
    <label for="grouping">Aktif : </label>
  </div>

  <div class="col-15">
  {% if row.sch_aktifYN == 'Y' %}
    <select name="aktifYND">             
        <option name="aktifYN">{{row.sch_aktifYN}}</option>
        <option name="aktifYN">D</option>
    </select>
  {% else %}
    <select name="aktifYND">             
        <option name="aktifYN">{{row.sch_aktifYN}}</option>
        <option name="aktifYN">Y</option>
    </select>
  {% endif %}
  </div>
</div>
{% endfor %}



</div> <!-- akhiran div containInsert -->

<center>
      <div class="colBut">
      <button class="submit">Save</button></div></form>

<!-- 
<form action="/deactivateSchedule" method="POST">
  <button name="deactive" value="{{kode_laporan}}">Deactivate</button>
</form> -->
      <div class="colBut">
        <form action="/editSchedule">
          <button class="submitred">Cancel</button>
        </form></div>

</center>
    

{% else %}


<center>
<h3>Schedule for :</h3>
<h2>{{kode_laporan}}</h2>
<h3>Not found</h3>

<p href="{url_for('/addSchedule')"> Click <a href="/addNewSchedule">here</a> to add Schedule </p> 

<!-- <form action="/editSchedule"><button>Back</button></form> -->

</center>

{% endif %}
</body>
{% endblock %}




{% block script %}
<script>
  /*                   RADIO BUTTON JADWAL            */
  function myFunction2(){
  var check1 = document.getElementById("dm");
  var Days = document.getElementById("Day");
  var Dates = document.getElementById("Date");
  var Months = document.getElementById("Month");

      if(check1.selected == false){ Days.style.display = "none"; Months.style.display ="none";}
          else{ Days.style.display = "inline-block"; Months.style.display ="inline-block";
                Dates.style.display ="none";}


}
function myFunction3(){
  var check2 = document.getElementById("dm2");
  var Days = document.getElementById("Day");
  var Dates = document.getElementById("Date");
  var Months = document.getElementById("Month");
  if(check2.selected == false){ Dates.style.display = "none"}
          else{ Dates.style.display = "inline-block"; Months.style.display ="inline-block";
                Days.style.display ="none";}
}

function myFunction4(){
  var check3 = document.getElementById("myCheck4");
  var Months = document.getElementById("Month");
   if(check3.checked == false){ Months.style.display = "none"}
          else{ Months.style.display = "block";}
}

// function myFunction4(check){
//   var Days = document.getElementById("Day");
//   var Dates = document.getElementById("Date");
//   if (check == "True"){
//     Dates.style.display = "none"; 
//   }else{
//     Days.style.display = "none"; 
//   }

// }

/*                     SEARCH BY NAME                   */
function funcSearchPIC() {
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("myInput");
  filter = input.value.toUpperCase();
  table = document.getElementById("list");
  tr = table.getElementsByTagName("tr");
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[2];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }       
  }
}

function funcSearchPen() {
  var input, filter, table, tr, td, i, txtValue;
  input = document.getElementById("myInput1");
  filter = input.value.toUpperCase();
  table = document.getElementById("listkedua");
  tr = table.getElementsByTagName("tr");
  for (i = 0; i < tr.length; i++) {
    td = tr[i].getElementsByTagName("td")[2];
    if (td) {
      txtValue = td.textContent || td.innerText;
      if (txtValue.toUpperCase().indexOf(filter) > -1) {
        tr[i].style.display = "";
      } else {
        tr[i].style.display = "none";
      }
    }       
  }
}
</script>

</html>
{% endblock %}

